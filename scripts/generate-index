#!/usr/bin/php
<?
/*
    ***** BEGIN LICENSE BLOCK *****
    
    This file is part of the Zotero Style Repository.
    
    Copyright © 2011–2012 Center for History and New Media
                          George Mason University, Fairfax, Virginia, USA
                          http://zotero.org
    
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.
    
    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
    ***** END LICENSE BLOCK *****
*/

error_reporting(E_ALL);
ini_set("display_errors", true);

ini_set('include_path', '.:' . dirname(dirname(__FILE__)) . '/include');
require('config.inc.php');
require('Styles.inc.php');

class CSL_Index_Generator {
	private static $initialized = false;
	private static $originalStylesPath;
	private static $localStylesPath;
	private static $dataPath;
	
	private static function init() {
		self::$initialized = true;
		
		self::$originalStylesPath = ROOT_PATH . "styles/original/";
		self::$localStylesPath = ROOT_PATH . "styles/local/";
		self::$dataPath = ROOT_PATH . "styles/data/";
		
		if (!file_exists(self::$originalStylesPath)) {
			throw new Exception("Original styles directory not found");
		}
		if (!file_exists(self::$originalStylesPath . ".git")) {
			chdir(self::$originalStylesPath);
			if (file_exists(".gitignore")) {
				unlink(".gitignore");
			}
			exec("git clone git://github.com/citation-style-language/styles.git .");
		}
		if (!file_exists(self::$localStylesPath . "dependent")) {
			mkdir(self::$localStylesPath . "dependent");
		}
		if (!file_exists(self::$dataPath . "dependent")) {
			mkdir(self::$dataPath . "dependent");
		}
	}
	
	public static function run() {
		if (!self::$initialized) {
			self::init();
		}
		
		// Update original styles
		chdir(self::$originalStylesPath);
		exec("/usr/bin/git pull");
		
		$keep = array(
			'independent' => array(),
			'dependent' => array()
		);
		
		$path = self::$originalStylesPath;
		$dir = opendir($path);
		while (false !== ($filename = readdir($dir))) {
			if (fnmatch("*.csl", $filename)) {
				$name = self::processOriginalStyle($path . $filename);
				if ($name) {
					$keep['independent'][] = $name;
				}
			}
		}
		closedir($dir);
		
		$path = self::$originalStylesPath . "dependent/";
		$dir = opendir($path);
		while (false !== ($filename = readdir($dir))) {
			if (fnmatch("*.csl", $filename)) {
				$name = self::processOriginalStyle($path . $filename, true);
				if ($name) {
					$keep['dependent'][] = $name;
				}
			}
		}
		closedir($dir);
		
		//
		// Delete styles that weren't updated
		//
		$path = self::$localStylesPath;
		$dir = opendir($path);
		while (false !== ($filename = readdir($dir))) {
			if (strpos($filename, ".") !== false) {
				continue;
			}
			if ($filename == 'dependent') {
				continue;
			}
			if (!in_array($filename, $keep['independent'])) {
				Styles::log("Deleting $filename");
				unlink($path . $filename);
			}
		}
		closedir($dir);
		
		$path = self::$localStylesPath . "dependent/";
		$dir = opendir($path);
		while (false !== ($filename = readdir($dir))) {
			if (strpos($filename, ".") !== false) {
				continue;
			}
			if (!in_array($filename, $keep['dependent'])) {
				Styles::log("Deleting dependent/$filename");
				unlink($path . $filename);
			}
		}
		closedir($dir);
		
		
		//
		// Delete data files that weren't updated
		//
		$path = self::$dataPath;
		$dir = opendir($path);
		while (false !== ($filename = readdir($dir))) {
			if (fnmatch("*.csl", $filename)) {
				if (!in_array($filename, $keep['independent'])) {
					Styles::log("Deleting $filename");
					unlink($path . $filename);
				}
			}
		}
		closedir($dir);
		
		$path = self::$dataPath . "dependent/";
		$dir = opendir($path);
		while (false !== ($filename = readdir($dir))) {
			if (fnmatch("*.csl", $filename)) {
				if (!in_array($filename, $keep['dependent'])) {
					Styles::log("Deleting dependent/$filename");
					unlink($path . $filename);
				}
			}
		}
		closedir($dir);
	}
	
	
	/**
	 * Update cached file from original
	 *
	 * If style doesn't already exist or has changed, set a new timestamp
	 *
	 * Returns the parsed style name, or FALSE on error
	 */
	private static function processOriginalStyle($originalStyle, $dependent=false) {
		Styles::log("=========================================\n");
		$filename = substr(strrchr($originalStyle, '/'), 1);
		Styles::log("$filename\n");
		
		$valid = null;
		
		$xmlstr = file_get_contents($originalStyle);
		
		try {
			$xml = new SimpleXMLElement($xmlstr);
		}
		catch (Exception $e) {
			Styles::log("$filename is invalid XML");
			return false;
		}
		
		$name = substr(strrchr($xml->info->id, '/'), 1);
		
		if (strpos($name, ".") !== false) {
			Styles::log("Invalid style name '" . $name . "'");
			return false;
		}
		
		// Compare CSL to existing version and skip if identical
		$localStyle = self::$localStylesPath . ($dependent ? "dependent/" : "") . $name;
		$dataFile = self::$dataPath . ($dependent ? "dependent/" : "") . $name;
		if (file_exists($localStyle) && file_exists($dataFile)) {
			$code = file_get_contents($localStyle);
			if (preg_replace("'<updated>.*</updated>'", "<updated/>", $code)
					== preg_replace("'<updated>.*</updated>'", "<updated/>", $xmlstr)) {
				Styles::log("$filename hasn't changed -- skipping\n");
				return $name;
			}
		}
		
		// Use timestamp from last git commit
		
		
		// TODO: ability to blacklist certain commit timestamps
		
		
		chdir(self::$originalStylesPath);
		$date = shell_exec("git log -n 1 --date=iso " . ($dependent ? 'dependent/' : '') . escapeshellarg($filename) . " | grep Date: | head -n 1");
		if (preg_match('/^Date:\s*([0-9]{4}\-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} [+\-][0-9]{4})/', $date, $matches)) {
			$time = strtotime($matches[1]);
		}
		else {
			Styles::log("Error retrieving date from git log");
			$time = filemtime($originalStyle);
		}
		
		$iso8601 = gmdate("c", $time);
		
		$xmlstr = preg_replace(array("'<updated>.*</updated>'", "'<updated/>'"), "<updated>$iso8601</updated>", $xmlstr);
		file_put_contents($localStyle, $xmlstr);
		
		$cmd = "/usr/bin/xmllint --relaxng " . ROOT_PATH . "scripts/schema/csl.rng --noout $localStyle";
		Styles::log($cmd);
		exec($cmd, $output, $code);
		if ($code != 0) {
			Styles::log("\n$filename is invalid\n");
			$valid = false;
		}
		else {
			$valid = true;
		}
		
		// Write data file
		$data = array(
			'valid' => $valid
		);
		file_put_contents($dataFile, json_encode($data));
		
		return $name;
	}
}

CSL_Index_Generator::run();
?>
